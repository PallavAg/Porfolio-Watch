{"version":3,"sources":["components/login.js","components/register.js","components/Order.jsx","components/OrdersList.jsx","components/home.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleChange","name","event","setState","target","value","handleSubmit","a","preventDefault","loading","userData","email","state","password","axios","post","res","token","data","localStorage","setItem","loggedIn","onToggleLogin","console","log","alert","error","getItem","jwt_decode","this","to","Container","Card","Body","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","Button","variant","disabled","Spinner","as","size","role","aria-hidden","Alert","React","Component","Home","password2","msg","Order","order","className","price","title","OrderList","orders","map","index","key","id","logout","e","removeItem","handlePriceChange","priceInput","placeBuy","thePrice","isNaN","length","push","placeSell","navbar","Navbar","sticky","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","onClick","signUpStatus","Link","loginStatus","formInput","setLoginStatus","registerRoutes","path","user","get","headers","Authorization","response","header","src","alt","substring","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d332fc8a.chunk.js","sourcesContent":["import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { Redirect, Link } from \"react-router-dom\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    const { onToggleLogin } = props;\n    this.state = {\n      email: \"\",\n      password: \"\",\n      loading: false,\n      loggedIn: false,\n      error: \"\",\n      onToggleLogin\n    };\n  }\n  componentDidMount() {\n    let token = localStorage.getItem(\"jwtToken\");\n    if (token) {\n      console.log(\"token\", token);\n      const decoded = jwt_decode(token);\n      if (decoded) {\n        this.setState({ loggedIn: true });\n        //this.state.onToggleLogin(this.state.loggedIn);\n        console.log(\"11\");\n      }\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n\n    let userData = { email: this.state.email, password: this.state.password };\n\n    try {\n      const res = await axios.post(\"/api/login\", userData);\n\n      // Save to localStorage\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n\n      this.setState({ loading: false, loggedIn: true });\n      this.state.onToggleLogin(this.state.loggedIn);\n      console.log(\"10\");\n      alert(\"Logged In Successfully!\");\n    } catch (err) {\n      console.log(err);\n      this.setState({ loading: false, error: \"Login Failed\" });\n    }\n  };\n\n  render() {\n    if (this.state.loggedIn === true) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <>\n        <Container>\n          <Card>\n            <Card.Body>\n              <p>\n                <Link to=\"/\">Close</Link>\n              </p>\n              <Form onSubmit={this.handleSubmit}>\n                <Form.Group controlId=\"formGroupEmail\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    value={this.state.email}\n                    onChange={this.handleChange(\"email\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupPassword\">\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    value={this.state.password}\n                    onChange={this.handleChange(\"password\")}\n                  />\n                </Form.Group>\n\n                {this.state.loading ? (\n                  <Button variant=\"primary\" disabled>\n                    <Spinner as=\"span\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n                    Loading...\n                  </Button>\n                ) : (\n                  <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                  </Button>\n                )}\n              </Form>\n              {this.state.error ? <Alert variant=\"danger\">{this.state.error}</Alert> : <></>}\n            </Card.Body>\n          </Card>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { Link } from \"react-router-dom\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      password2: \"\",\n      loading: false,\n      error: \"\"\n    };\n  }\n  componentDidMount() {\n    let token = localStorage.getItem(\"jwtToken\");\n    if (token) {\n      console.log(\"token\", token);\n      console.log(token);\n      const decoded = jwt_decode(token);\n      if (decoded) {\n        this.setState({ loggedIn: true });\n      }\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n\n    if (this.state.password !== this.state.password2) {\n      this.setState({ loading: false, msg: \"Passwords don't match\" });\n    } else {\n      let userData = {\n        name: this.state.name,\n        email: this.state.email,\n        password: this.state.password\n      };\n\n      try {\n        await axios.post(\"/api/register\", userData);\n\n        this.setState({ loading: false, msg: \"Registration Successful.\" });\n      } catch (err) {\n        console.log(err);\n        this.setState({ loading: false, msg: \"Registration Failed.\" });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Container>\n          <Card>\n            <Card.Body>\n              <p>\n                <Link to=\"/\">Close</Link>\n              </p>\n              <Form onSubmit={this.handleSubmit}>\n                <Form.Group controlId=\"formGroupEmail\">\n                  <Form.Label>Name</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter name\"\n                    value={this.state.name}\n                    onChange={this.handleChange(\"name\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupEmail\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    value={this.state.email}\n                    onChange={this.handleChange(\"email\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupPassword\">\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    value={this.state.password}\n                    onChange={this.handleChange(\"password\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupPassword\">\n                  <Form.Label>Confirm Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Confirm Password\"\n                    value={this.state.password2}\n                    onChange={this.handleChange(\"password2\")}\n                  />\n                </Form.Group>\n\n                {this.state.loading ? (\n                  <Button variant=\"primary\" disabled>\n                    <Spinner as=\"span\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n                    Loading...\n                  </Button>\n                ) : (\n                  <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                  </Button>\n                )}\n              </Form>\n              {this.state.msg ? <Alert variant=\"danger\">{this.state.msg}</Alert> : <></>}\n            </Card.Body>\n          </Card>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\n\nclass Order extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    let { order } = this.props;\n    let cardClass = \"card\";\n\n    return (\n      <div className={cardClass}>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{order.price}</h5>\n          <p className=\"card-text\">{order.title}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Order;\n","import React, { Component } from \"react\";\nimport Order from \"./Order\";\n\nclass OrderList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    let orders = this.props.orders.map((order, index) => <Order key={index} order={order} index={index} />);\n\n    return (\n      <div id=\"ordercardList\" className=\"container\">\n        {orders}\n      </div>\n    );\n  }\n}\n\nexport default OrderList;\n","import Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Button from \"react-bootstrap/Button\";\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport \"../App.css\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Login from \"./login\";\nimport Register from \"./register\";\n\nimport OrderList from \"./OrdersList\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    const { onToggleLogin } = props;\n    this.state = {\n      loading: true,\n      user: null,\n      loggedIn: false,\n      msg: \"\",\n      onToggleLogin,\n      orders: [\n        { title: \"Buy\", price: \"$5\" },\n        { title: \"Sell\", price: \"$10\" },\n        { title: \"Buy\", price: \"$50\" }\n      ],\n      price: \"\",\n      priceInput: \"\",\n      loginStatus: \"\",\n      signUpStatus: \"Sign Up\"\n    };\n  }\n\n  async componentDidMount() {\n    const token = localStorage.getItem(\"jwtToken\");\n    if (!token) {\n      this.setState({\n        loading: false,\n        loggedIn: false\n      });\n    } else if (this.state.loading) {\n      try {\n        const response = await axios.get(\"/api/protected\", {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        console.log(response.data);\n        this.setState({\n          loading: false,\n          loggedIn: true,\n          user: jwt_decode(token, { header: true }),\n          msg: response.data.msg\n        });\n        // this.state.onToggleLogin(this.state.loggedIn);\n      } catch (error) {\n        console.log(error);\n        this.setState({\n          loading: false,\n          loggedIn: true,\n          user: jwt_decode(token, { header: true }),\n          msg: \"The protected route failed :( Check console for errors\"\n        });\n      }\n    }\n  }\n\n  logout = e => {\n    console.log(\"LOGGING OUT\");\n    e.preventDefault();\n    localStorage.removeItem(\"jwtToken\");\n    this.setState({ loggedIn: false });\n    // this.state.onToggleLogin(!this.state.loggedIn);\n  };\n\n  handlePriceChange = e => {\n    this.setState({ priceInput: e.target.value });\n  };\n\n  placeBuy = () => {\n    let thePrice = this.state.priceInput;\n    if (!isNaN(thePrice) && thePrice.length !== 0) {\n      alert(\"Successfully placed order of $\" + thePrice + \" BTC!\");\n\n      let order = {\n        title: \"Buy\",\n        price: thePrice\n      };\n\n      let { orders } = this.state;\n      orders.push(order);\n      console.log(this.state.orders);\n      this.setState({ orders: orders, priceInput: \"\" });\n    } else {\n      alert(\"Please enter a number!\");\n    }\n  };\n\n  placeSell = () => {};\n\n  navbar = () => {\n    return (\n      <Navbar sticky=\"top\" className=\"theNav\" variant=\"dark\" expand=\"lg\">\n        <Navbar.Brand className=\"navbar-brand mb-0 h1\" href=\"#home\">\n          Crypto Watch\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\"></Nav>\n          <Nav>\n            {/* <Nav.Link className=\"tempWhite\" href=\"/\">\n              Home\n            </Nav.Link> */}\n\n            <Link to=\"/\"> HOME </Link>\n            <Link to=\"/orders\"> Orders </Link>\n            {/* <Link to=\"/login\">{this.state.loginStatus}</Link> */}\n            <Link to=\"/login\"> Login </Link>\n            <Link to=\"/home\" onClick={this.logout}>\n              LOGOUT\n            </Link>\n            <Link to=\"/register\"> {this.state.signUpStatus} </Link>\n\n            <Nav.Link href=\"/\">Home</Nav.Link>\n            <Nav.Link href=\"/orders\">Orders</Nav.Link>\n            <Nav.Link href=\"/home\">{this.state.loginStatus}</Nav.Link>\n            <Nav.Link href=\"/register\">{this.state.signUpStatus}</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  };\n\n  formInput = () => {\n    return (\n      <form>\n        <input\n          className=\"form-control form-control-lg btcEnter\"\n          placeholder=\"Enter BTC Price $\"\n          type=\"text\"\n          name=\"order\"\n          value={this.state.priceInput}\n          onChange={this.handlePriceChange}\n        />\n        <input\n          onClick={this.placeBuy}\n          className=\"btn btn-primary placeOrder btn-sm\"\n          type=\"submit\"\n          value=\"Store Buy Order\"\n        />\n        &nbsp;&nbsp;\n        <input\n          onClick={this.placeBuy}\n          className=\"btn btn-primary placeOrder btn-sm\"\n          type=\"submit\"\n          value=\"Store Sell Order\"\n        />\n      </form>\n    );\n  };\n\n  // componentDidMount = async () => {\n  //   await axios\n  //     .get(\"https://api.coindesk.com/v1/bpi/currentprice.json\")\n  //     .then(responseJson => {\n  //       responseJson = responseJson.data;\n  //       this.setState({ price: responseJson.bpi.USD.rate });\n  //     })\n  //     .catch(error => {\n  //       console.error(error);\n  //     });\n\n  //   let token = localStorage.getItem(\"jwtToken\");\n  //   // console.log(this.state.orders);\n  //   if (token) {\n  //     const decoded = jwt_decode(token);\n  //     if (decoded) {\n  //       this.setState({ loginStatus: \"Logout\", signUpStatus: \"\" });\n  //     }\n  //   } else {\n  //     this.setState({ loginStatus: \"Login\", signUpStatus: \"Sign Up\" });\n  //   }\n  // };\n\n  setLoginStatus = loggedIn => {\n    if (loggedIn) {\n      this.setState({ loginStatus: \"Logout\", signUpStatus: \"\" });\n    } else {\n      this.setState({ loginStatus: \"Login\", signUpStatus: \"Sign Up\" });\n    }\n  };\n\n  registerRoutes = () => {\n    return (\n      <div className=\"auth-box\">\n        <Switch>\n          <Route path=\"/login\">\n            <Login onToggleLogin={this.setLoginStatus} />\n          </Route>\n          <Route path=\"/register\">\n            <Register />\n          </Route>\n          <Route path=\"/home\">\n            <Home onToggleLogin={this.setLoginStatus} />\n          </Route>\n          <Route path=\"/\"></Route>\n        </Switch>\n      </div>\n    );\n  };\n\n  render() {\n    if (!this.state.loading && !this.state.loggedIn) {\n      //return <Redirect to=\"/login\" />;\n    }\n\n    if (this.state.loading) {\n      return <Spinner as=\"span\" size=\"lg\" role=\"status\" aria-hidden=\"true\" />;\n    }\n\n    return (\n      <Router>\n        <Switch>\n          <Route path=\"/register\">\n            <Register />\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/orders\">\n            <div className=\"OrderTable App\">\n              {this.navbar()}\n              {/* <Counters /> */}\n              <OrderList orders={this.state.orders}></OrderList>\n            </div>\n          </Route>\n          <Route path=\"/\">\n            <div className=\"App\">\n              {/* <div>\n                <Container>\n                  <Card>\n                    <Card.Body>{this.state.msg}</Card.Body>\n                    <Button variant=\"primary\" type=\"submit\" href=\"/\">\n                      Cancel\n                    </Button>\n                    <Button variant=\"danger\" type=\"submit\" onClick={this.logout}>\n                      Logout\n                    </Button>\n                  </Card>\n                </Container>\n              </div> */}\n\n              {this.navbar()}\n              {this.registerRoutes()}\n              <header className=\"header\">\n                <h1 className=\"\">Crypto Watch</h1>\n                <img src={\"https://bit.ly/2NAyCIX\"} className=\"HeaderImg\" alt=\"Header\" />\n              </header>\n\n              <div className=\"priceView\">\n                <h1>Current BTC Price: ${this.state.price.substring(0, this.state.price.indexOf(\".\"))}</h1>\n                {this.formInput()}\n              </div>\n              {/* <div className=\"OrderTable\">\n          <OrderList orders={this.state.orders}></OrderList>\n        </div> */}\n            </div>\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport Home from \"./home\";\n\nclass Counters extends Component {\n  state = {\n    counters: [{ id: 1, value: 1 }, { id: 2, value: 2 }]\n  };\n\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.counters.map(counter => (\n          <Home\n            key={counter.id}\n            value={counter.value}\n            onDelete={this.handleDelete}\n            counter={counter}\n          >\n            <h4>Counter: {counter.value}</h4>\n          </Home>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Login from \"./components/login\";\nimport Register from \"./components/register\";\nimport Home from \"./components/home\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport OrderList from \"./components/OrdersList\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    orders: [\n      { title: \"Buy\", price: \"$5\" },\n      { title: \"Sell\", price: \"$10\" },\n      { title: \"Buy\", price: \"$50\" }\n    ],\n    price: \"\",\n    priceInput: \"\",\n    loginStatus: \"\",\n    signUpStatus: \"Sign Up\"\n  };\n\n  handlePriceChange = e => {\n    this.setState({ priceInput: e.target.value });\n  };\n\n  placeBuy = () => {\n    let thePrice = this.state.priceInput;\n    if (!isNaN(thePrice) && thePrice.length !== 0) {\n      alert(\"Successfully placed order of $\" + thePrice + \" BTC!\");\n\n      let order = {\n        title: \"Buy\",\n        price: thePrice\n      };\n\n      let { orders } = this.state;\n      orders.push(order);\n      console.log(this.state.orders);\n      this.setState({ orders: orders, priceInput: \"\" });\n    } else {\n      alert(\"Please enter a number!\");\n    }\n  };\n\n  placeSell = () => {};\n\n  navbar = () => {\n    return (\n      <Navbar sticky=\"top\" className=\"theNav\" variant=\"dark\" expand=\"lg\">\n        <Navbar.Brand className=\"navbar-brand mb-0 h1\" href=\"#home\">\n          Crypto Watch\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\"></Nav>\n          <Nav>\n            {/* <Nav.Link className=\"tempWhite\" href=\"/\">\n              Home\n            </Nav.Link> */}\n\n            <Link to=\"/\">HOME</Link>\n            <Link to=\"/orders\">Orders</Link>\n            <Link to=\"/login\">{this.state.loginStatus}</Link>\n            <Link to=\"/home\">LOGOUT</Link>\n            <Link to=\"/register\">{this.state.signUpStatus}</Link>\n\n            <Nav.Link href=\"/\">Home</Nav.Link>\n            <Nav.Link href=\"/orders\">Orders</Nav.Link>\n            <Nav.Link href=\"/home\">{this.state.loginStatus}</Nav.Link>\n            <Nav.Link href=\"/register\">{this.state.signUpStatus}</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  };\n\n  formInput = () => {\n    return (\n      <form>\n        <input\n          className=\"form-control form-control-lg btcEnter\"\n          placeholder=\"Enter BTC Price $\"\n          type=\"text\"\n          name=\"order\"\n          value={this.state.priceInput}\n          onChange={this.handlePriceChange}\n        />\n        <input\n          onClick={this.placeBuy}\n          className=\"btn btn-primary placeOrder btn-sm\"\n          type=\"submit\"\n          value=\"Store Buy Order\"\n        />\n        &nbsp;&nbsp;\n        <input\n          onClick={this.placeBuy}\n          className=\"btn btn-primary placeOrder btn-sm\"\n          type=\"submit\"\n          value=\"Store Sell Order\"\n        />\n      </form>\n    );\n  };\n\n  componentDidMount = async () => {\n    await axios\n      .get(\"https://api.coindesk.com/v1/bpi/currentprice.json\")\n      .then(responseJson => {\n        responseJson = responseJson.data;\n        this.setState({ price: responseJson.bpi.USD.rate });\n      })\n      .catch(error => {\n        console.error(error);\n      });\n\n    let token = localStorage.getItem(\"jwtToken\");\n    // console.log(this.state.orders);\n    if (token) {\n      const decoded = jwt_decode(token);\n      if (decoded) {\n        this.setState({ loginStatus: \"Logout\", signUpStatus: \"\" });\n      }\n    } else {\n      this.setState({ loginStatus: \"Login\", signUpStatus: \"Sign Up\" });\n    }\n  };\n\n  setLoginStatus = loggedIn => {\n    if (loggedIn) {\n      this.setState({ loginStatus: \"Logout\", signUpStatus: \"\" });\n    } else {\n      this.setState({ loginStatus: \"Login\", signUpStatus: \"Sign Up\" });\n    }\n  };\n\n  registerRoutes = () => {\n    return (\n      <Router>\n        <div className=\"auth-box\">\n          <Switch>\n            <Route path=\"/login\">\n              <Login onToggleLogin={this.setLoginStatus} />\n            </Route>\n            <Route path=\"/register\">\n              <Register />\n            </Route>\n            <Route path=\"/home\">\n              <Home onToggleLogin={this.setLoginStatus} />\n            </Route>\n            <Route path=\"/\"></Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  };\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path=\"/register\">\n            <Register />\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <Route path=\"/orders\">\n            <div className=\"OrderTable App\">\n              {this.navbar()}\n              {/* <Counters /> */}\n              <OrderList orders={this.state.orders}></OrderList>\n            </div>\n          </Route>\n          <Route path=\"/\">\n            <div className=\"App\">\n              {this.navbar()}\n              {this.registerRoutes()}\n              <header className=\"header\">\n                <h1 className=\"\">Crypto Watch</h1>\n                <img src={\"https://bit.ly/2NAyCIX\"} className=\"HeaderImg\" alt=\"Header\" />\n              </header>\n\n              <div className=\"priceView\">\n                <h1>Current BTC Price: ${this.state.price.substring(0, this.state.price.indexOf(\".\"))}</h1>\n                {this.formInput()}\n              </div>\n              {/* <div className=\"OrderTable\">\n          <OrderList orders={this.state.orders}></OrderList>\n        </div> */}\n            </div>\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Home from \"./components/home\";\n//import Counters from \"./components/counters\";\n\nReactDOM.render(<Home />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}