{"version":3,"sources":["components/login.js","components/register.js","components/home.jsx","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleChange","name","event","setState","target","value","handleSubmit","a","preventDefault","loading","userData","email","state","password","axios","post","res","token","data","localStorage","setItem","loggedIn","onToggleLogin","console","log","alert","error","getItem","jwt_decode","this","to","Container","Card","Body","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","Button","variant","disabled","Spinner","as","size","role","aria-hidden","Alert","React","Component","Home","password2","msg","logout","e","removeItem","user","get","headers","Authorization","response","header","href","onClick","App","price","priceInput","loginStatus","signUpStatus","handlePriceChange","placeBuy","thePrice","isNaN","length","placeSell","navbar","Navbar","sticky","className","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","formInput","componentDidMount","then","responseJson","bpi","USD","rate","catch","setLoginStatus","registerRoutes","path","src","alt","substring","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8VAsHeA,E,YA1Gb,WAAYC,GAAQ,IAAD,uBACjB,4CAAMA,KAwBRC,aAAe,SAAAC,GAAI,OAAI,SAAAC,GACrB,EAAKC,SAAL,eAAiBF,EAAOC,EAAME,OAAOC,UA1BpB,EA6BnBC,aA7BmB,uCA6BJ,WAAMJ,GAAN,mBAAAK,EAAA,6DACbL,EAAMM,iBACN,EAAKL,SAAS,CAAEM,SAAS,IAErBC,EAAW,CAAEC,MAAO,EAAKC,MAAMD,MAAOE,SAAU,EAAKD,MAAMC,UAJlD,kBAOOC,IAAMC,KAAK,aAAcL,GAPhC,OAOLM,EAPK,OAWHC,EAAUD,EAAIE,KAAdD,MACRE,aAAaC,QAAQ,WAAYH,GAEjC,EAAKd,SAAS,CAAEM,SAAS,EAAOY,UAAU,IAC1C,EAAKT,MAAMU,cAAc,EAAKV,MAAMS,UACpCE,QAAQC,IAAI,MACZC,MAAM,2BAjBK,kDAmBXF,QAAQC,IAAR,MACA,EAAKrB,SAAS,CAAEM,SAAS,EAAOiB,MAAO,iBApB5B,0DA7BI,0DAETJ,EAAkBvB,EAAlBuB,cAFS,OAGjB,EAAKV,MAAQ,CACXD,MAAO,GACPE,SAAU,GACVJ,SAAS,EACTY,UAAU,EACVK,MAAO,GACPJ,iBATe,E,iFAajB,IAAIL,EAAQE,aAAaQ,QAAQ,YAC7BV,IACFM,QAAQC,IAAI,QAASP,GACLW,IAAWX,KAEzBY,KAAK1B,SAAS,CAAEkB,UAAU,IAE1BE,QAAQC,IAAI,U,+BAkChB,OAA4B,IAAxBK,KAAKjB,MAAMS,SACN,kBAAC,IAAD,CAAUS,GAAG,MAIpB,oCACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,2BACE,kBAAC,IAAD,CAAMH,GAAG,KAAT,UAEF,kBAACI,EAAA,EAAD,CAAMC,SAAUN,KAAKvB,cACnB,kBAAC4B,EAAA,EAAKE,MAAN,CAAYC,UAAU,kBACpB,kBAACH,EAAA,EAAKI,MAAN,sBACA,kBAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,QACLC,YAAY,cACZpC,MAAOwB,KAAKjB,MAAMD,MAClB+B,SAAUb,KAAK7B,aAAa,YAGhC,kBAACkC,EAAA,EAAKE,MAAN,CAAYC,UAAU,qBACpB,kBAACH,EAAA,EAAKI,MAAN,iBACA,kBAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,WACLC,YAAY,WACZpC,MAAOwB,KAAKjB,MAAMC,SAClB6B,SAAUb,KAAK7B,aAAa,eAI/B6B,KAAKjB,MAAMH,QACV,kBAACkC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,UAAQ,GAChC,kBAACC,EAAA,EAAD,CAASC,GAAG,OAAOC,KAAK,KAAKC,KAAK,SAASC,cAAY,SADzD,cAKA,kBAACP,EAAA,EAAD,CAAQC,QAAQ,UAAUJ,KAAK,UAA/B,WAKHX,KAAKjB,MAAMc,MAAQ,kBAACyB,EAAA,EAAD,CAAOP,QAAQ,UAAUf,KAAKjB,MAAMc,OAAiB,6C,GAlGnE0B,IAAMC,WCwHXC,E,YAvHb,WAAYvD,GAAQ,IAAD,8BACjB,4CAAMA,KAuBRC,aAAe,SAAAC,GAAI,OAAI,SAAAC,GACrB,EAAKC,SAAL,eAAiBF,EAAOC,EAAME,OAAOC,UAzBpB,EA4BnBC,aA5BmB,uCA4BJ,WAAMJ,GAAN,eAAAK,EAAA,yDACbL,EAAMM,iBACN,EAAKL,SAAS,CAAEM,SAAS,IAErB,EAAKG,MAAMC,WAAa,EAAKD,MAAM2C,UAJ1B,gBAKX,EAAKpD,SAAS,CAAEM,SAAS,EAAO+C,IAAK,0BAL1B,8BAOP9C,EAAW,CACbT,KAAM,EAAKW,MAAMX,KACjBU,MAAO,EAAKC,MAAMD,MAClBE,SAAU,EAAKD,MAAMC,UAVZ,mBAcHC,IAAMC,KAAK,gBAAiBL,GAdzB,QAgBT,EAAKP,SAAS,CAAEM,SAAS,EAAO+C,IAAK,6BAhB5B,kDAkBTjC,QAAQC,IAAR,MACA,EAAKrB,SAAS,CAAEM,SAAS,EAAO+C,IAAK,yBAnB5B,0DA5BI,sDAGjB,EAAK5C,MAAQ,CACXX,KAAM,GACNU,MAAO,GACPE,SAAU,GACV0C,UAAW,GACX9C,SAAS,EACTiB,MAAO,IATQ,E,iFAajB,IAAIT,EAAQE,aAAaQ,QAAQ,YAC7BV,IACFM,QAAQC,IAAI,QAASP,GACrBM,QAAQC,IAAIP,GACIW,IAAWX,IAEzBY,KAAK1B,SAAS,CAAEkB,UAAU,O,+BAkC9B,OACE,oCACE,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,2BACE,kBAAC,IAAD,CAAMH,GAAG,KAAT,UAEF,kBAACI,EAAA,EAAD,CAAMC,SAAUN,KAAKvB,cACnB,kBAAC4B,EAAA,EAAKE,MAAN,CAAYC,UAAU,kBACpB,kBAACH,EAAA,EAAKI,MAAN,aACA,kBAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,YAAY,aACZpC,MAAOwB,KAAKjB,MAAMX,KAClByC,SAAUb,KAAK7B,aAAa,WAGhC,kBAACkC,EAAA,EAAKE,MAAN,CAAYC,UAAU,kBACpB,kBAACH,EAAA,EAAKI,MAAN,sBACA,kBAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,QACLC,YAAY,cACZpC,MAAOwB,KAAKjB,MAAMD,MAClB+B,SAAUb,KAAK7B,aAAa,YAGhC,kBAACkC,EAAA,EAAKE,MAAN,CAAYC,UAAU,qBACpB,kBAACH,EAAA,EAAKI,MAAN,iBACA,kBAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,WACLC,YAAY,WACZpC,MAAOwB,KAAKjB,MAAMC,SAClB6B,SAAUb,KAAK7B,aAAa,eAGhC,kBAACkC,EAAA,EAAKE,MAAN,CAAYC,UAAU,qBACpB,kBAACH,EAAA,EAAKI,MAAN,yBACA,kBAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,WACLC,YAAY,mBACZpC,MAAOwB,KAAKjB,MAAM2C,UAClBb,SAAUb,KAAK7B,aAAa,gBAI/B6B,KAAKjB,MAAMH,QACV,kBAACkC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,UAAQ,GAChC,kBAACC,EAAA,EAAD,CAASC,GAAG,OAAOC,KAAK,KAAKC,KAAK,SAASC,cAAY,SADzD,cAKA,kBAACP,EAAA,EAAD,CAAQC,QAAQ,UAAUJ,KAAK,UAA/B,WAKHX,KAAKjB,MAAM4C,IAAM,kBAACL,EAAA,EAAD,CAAOP,QAAQ,UAAUf,KAAKjB,MAAM4C,KAAe,6C,GA/GhEH,aCkFJC,E,YAlFb,WAAYvD,GAAQ,IAAD,uBACjB,4CAAMA,KAgDR0D,OAAS,SAAAC,GACPA,EAAElD,iBACFW,aAAawC,WAAW,YACxB,EAAKxD,SAAS,CAAEkB,UAAU,IAC1B,EAAKT,MAAMU,cAAc,EAAKV,MAAMS,UACpCE,QAAQC,IAAI,MAtDK,IAETF,EAAkBvB,EAAlBuB,cAFS,OAGjB,EAAKV,MAAQ,CACXH,SAAS,EACTmD,KAAM,KACNvC,UAAU,EACVmC,IAAK,GACLlC,iBARe,E,sMAaXL,EAAQE,aAAaQ,QAAQ,Y,gBAEjCE,KAAK1B,SAAS,CACZM,SAAS,EACTY,UAAU,IAGZE,QAAQC,IAAI,K,2BACHK,KAAKjB,MAAMH,Q,2CAEKK,IAAM+C,IAAI,iBAAkB,CACjDC,QAAS,CAAEC,cAAc,UAAD,OAAY9C,M,QADhC+C,E,OAGNzC,QAAQC,IAAIwC,EAAS9C,MACrBW,KAAK1B,SAAS,CACZM,SAAS,EACTY,UAAU,EACVuC,KAAMhC,IAAWX,EAAO,CAAEgD,QAAQ,IAClCT,IAAKQ,EAAS9C,KAAKsC,MAErB3B,KAAKjB,MAAMU,cAAcO,KAAKjB,MAAMS,UACpCE,QAAQC,IAAI,K,kDAEZD,QAAQC,IAAR,MACAK,KAAK1B,SAAS,CACZM,SAAS,EACTY,UAAU,EACVuC,KAAMhC,IAAWX,EAAO,CAAEgD,QAAQ,IAClCT,IAAK,2DAGPjC,QAAQC,IAAI,K,+IAchB,OAAKK,KAAKjB,MAAMH,SAAYoB,KAAKjB,MAAMS,SAInCQ,KAAKjB,MAAMH,QACN,kBAACqC,EAAA,EAAD,CAASC,GAAG,OAAOC,KAAK,KAAKC,KAAK,SAASC,cAAY,SAI9D,kBAACnB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KAAYJ,KAAKjB,MAAM4C,KACvB,kBAACb,EAAA,EAAD,CAAQC,QAAQ,UAAUJ,KAAK,SAAS0B,KAAK,KAA7C,UAGA,kBAACvB,EAAA,EAAD,CAAQC,QAAQ,SAASJ,KAAK,SAAS2B,QAAStC,KAAK4B,QAArD,YAdG,kBAAC,IAAD,CAAU3B,GAAG,e,GA5DPuB,aCsIJe,E,2MArIbxD,MAAQ,CACNyD,MAAO,GACPC,WAAY,GACZC,YAAa,eACbC,aAAc,W,EAGhBC,kBAAoB,SAAAf,GAClB,EAAKvD,SAAS,CAAEmE,WAAYZ,EAAEtD,OAAOC,S,EAGvCqE,SAAW,WACT,IAAIC,EAAW,EAAK/D,MAAM0D,WACrBM,MAAMD,IAAiC,IAApBA,EAASE,OAG/BpD,MAAM,0BAFNA,MAAM,iCAAmCkD,EAAW,U,EAMxDG,UAAY,a,EAEZC,OAAS,WACP,OACE,kBAACC,EAAA,EAAD,CAAQC,OAAO,MAAMC,UAAU,SAAStC,QAAQ,OAAOuC,OAAO,MAC5D,kBAACH,EAAA,EAAOI,MAAR,CAAcF,UAAU,uBAAuBhB,KAAK,SAApD,gBAGA,kBAACc,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKP,UAAU,YACf,kBAACO,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,CAAUR,UAAU,YAAYhB,KAAK,KAArC,QAGA,kBAACuB,EAAA,EAAIC,KAAL,CAAUxB,KAAK,WAAf,UACA,kBAACuB,EAAA,EAAIC,KAAL,CAAUxB,KAAK,SAAS,EAAKtD,MAAM2D,aACnC,kBAACkB,EAAA,EAAIC,KAAL,CAAUxB,KAAK,aAAa,EAAKtD,MAAM4D,kB,EAOjDmB,UAAY,WACV,OACE,8BACE,2BACET,UAAU,wCACVzC,YAAY,oBACZD,KAAK,OACLvC,KAAK,QACLI,MAAO,EAAKO,MAAM0D,WAClB5B,SAAU,EAAK+B,oBAEjB,2BACEN,QAAS,EAAKO,SACdQ,UAAU,oCACV1C,KAAK,SACLnC,MAAM,oBAbV,WAgBE,2BACE8D,QAAS,EAAKO,SACdQ,UAAU,oCACV1C,KAAK,SACLnC,MAAM,uB,EAMduF,kB,sBAAoB,sBAAArF,EAAA,sEACZO,IACH+C,IAAI,qDACJgC,MAAK,SAAAC,GAEJA,EAAeA,EAAa5E,KAE5B,EAAKf,SAAS,CAAEkE,MAAOyB,EAAaC,IAAIC,IAAIC,UAE7CC,OAAM,SAAAxE,GACLH,QAAQG,MAAMA,MAVA,2C,EAcpByE,eAAiB,SAAA9E,K,EAQjB+E,eAAiB,WACf,OACE,kBAAC,IAAD,KACE,yBAAKlB,UAAU,YACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,KAAK,UACV,kBAAC,EAAD,CAAO/E,cAAe,EAAK6E,kBAE7B,kBAAC,IAAD,CAAOE,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,CAAM/E,cAAe,EAAK6E,kBAE5B,kBAAC,IAAD,CAAOE,KAAK,U,wEAQpB,OACE,yBAAKnB,UAAU,OACZrD,KAAKkD,SACLlD,KAAKuE,iBACN,4BAAQlB,UAAU,UAChB,wBAAIA,UAAU,IAAd,gBACA,yBAAKoB,IAAK,yBAA0BpB,UAAU,YAAYqB,IAAI,YAGhE,yBAAKrB,UAAU,aACb,mDAAyBrD,KAAKjB,MAAMyD,MAAMmC,UAAU,EAAG3E,KAAKjB,MAAMyD,MAAMoC,QAAQ,OAC/E5E,KAAK8D,kB,GAhIEtC,aCEEqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.b2a7b80b.chunk.js","sourcesContent":["import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { Redirect, Link } from \"react-router-dom\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    const { onToggleLogin } = props;\n    this.state = {\n      email: \"\",\n      password: \"\",\n      loading: false,\n      loggedIn: false,\n      error: \"\",\n      onToggleLogin\n    };\n  }\n  componentDidMount() {\n    let token = localStorage.getItem(\"jwtToken\");\n    if (token) {\n      console.log(\"token\", token);\n      const decoded = jwt_decode(token);\n      if (decoded) {\n        this.setState({ loggedIn: true });\n        //this.state.onToggleLogin(this.state.loggedIn);\n        console.log(\"11\");\n      }\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n\n    let userData = { email: this.state.email, password: this.state.password };\n\n    try {\n      const res = await axios.post(\"/api/login\", userData);\n\n      // Save to localStorage\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n\n      this.setState({ loading: false, loggedIn: true });\n      this.state.onToggleLogin(this.state.loggedIn);\n      console.log(\"10\");\n      alert(\"Logged In Successfully!\");\n    } catch (err) {\n      console.log(err);\n      this.setState({ loading: false, error: \"Login Failed\" });\n    }\n  };\n\n  render() {\n    if (this.state.loggedIn === true) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <>\n        <Container>\n          <Card>\n            <Card.Body>\n              <p>\n                <Link to=\"/\">Close</Link>\n              </p>\n              <Form onSubmit={this.handleSubmit}>\n                <Form.Group controlId=\"formGroupEmail\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    value={this.state.email}\n                    onChange={this.handleChange(\"email\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupPassword\">\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    value={this.state.password}\n                    onChange={this.handleChange(\"password\")}\n                  />\n                </Form.Group>\n\n                {this.state.loading ? (\n                  <Button variant=\"primary\" disabled>\n                    <Spinner as=\"span\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n                    Loading...\n                  </Button>\n                ) : (\n                  <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                  </Button>\n                )}\n              </Form>\n              {this.state.error ? <Alert variant=\"danger\">{this.state.error}</Alert> : <></>}\n            </Card.Body>\n          </Card>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { Link } from \"react-router-dom\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      password2: \"\",\n      loading: false,\n      error: \"\"\n    };\n  }\n  componentDidMount() {\n    let token = localStorage.getItem(\"jwtToken\");\n    if (token) {\n      console.log(\"token\", token);\n      console.log(token);\n      const decoded = jwt_decode(token);\n      if (decoded) {\n        this.setState({ loggedIn: true });\n      }\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n\n    if (this.state.password !== this.state.password2) {\n      this.setState({ loading: false, msg: \"Passwords don't match\" });\n    } else {\n      let userData = {\n        name: this.state.name,\n        email: this.state.email,\n        password: this.state.password\n      };\n\n      try {\n        await axios.post(\"/api/register\", userData);\n\n        this.setState({ loading: false, msg: \"Registration Successful.\" });\n      } catch (err) {\n        console.log(err);\n        this.setState({ loading: false, msg: \"Registration Failed.\" });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Container>\n          <Card>\n            <Card.Body>\n              <p>\n                <Link to=\"/\">Close</Link>\n              </p>\n              <Form onSubmit={this.handleSubmit}>\n                <Form.Group controlId=\"formGroupEmail\">\n                  <Form.Label>Name</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter name\"\n                    value={this.state.name}\n                    onChange={this.handleChange(\"name\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupEmail\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    value={this.state.email}\n                    onChange={this.handleChange(\"email\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupPassword\">\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    value={this.state.password}\n                    onChange={this.handleChange(\"password\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupPassword\">\n                  <Form.Label>Confirm Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Confirm Password\"\n                    value={this.state.password2}\n                    onChange={this.handleChange(\"password2\")}\n                  />\n                </Form.Group>\n\n                {this.state.loading ? (\n                  <Button variant=\"primary\" disabled>\n                    <Spinner as=\"span\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n                    Loading...\n                  </Button>\n                ) : (\n                  <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                  </Button>\n                )}\n              </Form>\n              {this.state.msg ? <Alert variant=\"danger\">{this.state.msg}</Alert> : <></>}\n            </Card.Body>\n          </Card>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default Home;\n","import Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Button from \"react-bootstrap/Button\";\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { Redirect } from \"react-router-dom\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    const { onToggleLogin } = props;\n    this.state = {\n      loading: true,\n      user: null,\n      loggedIn: false,\n      msg: \"\",\n      onToggleLogin\n    };\n  }\n\n  async componentDidMount() {\n    const token = localStorage.getItem(\"jwtToken\");\n    if (!token) {\n      this.setState({\n        loading: false,\n        loggedIn: false\n      });\n      //this.state.onToggleLogin(this.state.loggedIn);\n      console.log(\"1\");\n    } else if (this.state.loading) {\n      try {\n        const response = await axios.get(\"/api/protected\", {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        console.log(response.data);\n        this.setState({\n          loading: false,\n          loggedIn: true,\n          user: jwt_decode(token, { header: true }),\n          msg: response.data.msg\n        });\n        this.state.onToggleLogin(this.state.loggedIn);\n        console.log(\"2\");\n      } catch (error) {\n        console.log(error);\n        this.setState({\n          loading: false,\n          loggedIn: true,\n          user: jwt_decode(token, { header: true }),\n          msg: \"The protected route failed :( Check console for errors\"\n        });\n        //this.state.onToggleLogin(this.state.loggedIn);\n        console.log(\"3\");\n      }\n    }\n  }\n\n  logout = e => {\n    e.preventDefault();\n    localStorage.removeItem(\"jwtToken\");\n    this.setState({ loggedIn: false });\n    this.state.onToggleLogin(this.state.loggedIn);\n    console.log(\"4\");\n  };\n\n  render() {\n    if (!this.state.loading && !this.state.loggedIn) {\n      return <Redirect to=\"/login\" />;\n    }\n\n    if (this.state.loading) {\n      return <Spinner as=\"span\" size=\"lg\" role=\"status\" aria-hidden=\"true\" />;\n    }\n\n    return (\n      <Container>\n        <Card>\n          <Card.Body>{this.state.msg}</Card.Body>\n          <Button variant=\"primary\" type=\"submit\" href=\"/\">\n            Cancel\n          </Button>\n          <Button variant=\"danger\" type=\"submit\" onClick={this.logout}>\n            Logout\n          </Button>\n        </Card>\n      </Container>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Login from \"./components/login\";\nimport Register from \"./components/register\";\nimport Home from \"./components/home\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    price: \"\",\n    priceInput: \"\",\n    loginStatus: \"Login/Logout\",\n    signUpStatus: \"Sign Up\"\n  };\n\n  handlePriceChange = e => {\n    this.setState({ priceInput: e.target.value });\n  };\n\n  placeBuy = () => {\n    let thePrice = this.state.priceInput;\n    if (!isNaN(thePrice) && thePrice.length !== 0) {\n      alert(\"Successfully placed order of $\" + thePrice + \" BTC!\");\n    } else {\n      alert(\"Please enter a number!\");\n    }\n  };\n\n  placeSell = () => {};\n\n  navbar = () => {\n    return (\n      <Navbar sticky=\"top\" className=\"theNav\" variant=\"dark\" expand=\"lg\">\n        <Navbar.Brand className=\"navbar-brand mb-0 h1\" href=\"#home\">\n          Crypto Watch\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\"></Nav>\n          <Nav>\n            <Nav.Link className=\"tempWhite\" href=\"/\">\n              Home\n            </Nav.Link>\n            <Nav.Link href=\"#orders\">Orders</Nav.Link>\n            <Nav.Link href=\"/home\">{this.state.loginStatus}</Nav.Link>\n            <Nav.Link href=\"/register\">{this.state.signUpStatus}</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  };\n\n  formInput = () => {\n    return (\n      <form>\n        <input\n          className=\"form-control form-control-lg btcEnter\"\n          placeholder=\"Enter BTC Price $\"\n          type=\"text\"\n          name=\"order\"\n          value={this.state.priceInput}\n          onChange={this.handlePriceChange}\n        />\n        <input\n          onClick={this.placeBuy}\n          className=\"btn btn-primary placeOrder btn-sm\"\n          type=\"submit\"\n          value=\"Store Buy Order\"\n        />\n        &nbsp;&nbsp;\n        <input\n          onClick={this.placeBuy}\n          className=\"btn btn-primary placeOrder btn-sm\"\n          type=\"submit\"\n          value=\"Store Sell Order\"\n        />\n      </form>\n    );\n  };\n\n  componentDidMount = async () => {\n    await axios\n      .get(\"https://api.coindesk.com/v1/bpi/currentprice.json\")\n      .then(responseJson => {\n        //console.log(responseJson);\n        responseJson = responseJson.data;\n        //console.log(responseJson[\"bpi\"][\"USD\"].rate_float);\n        this.setState({ price: responseJson.bpi.USD.rate });\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  };\n\n  setLoginStatus = loggedIn => {\n    if (loggedIn) {\n      //this.setState({ loginStatus: \"Logout\", signUpStatus: \"Sign Up\" });\n    } else {\n      //this.setState({ loginStatus: \"Login\", signUpStatus: \"Sign Up\" });\n    }\n  };\n\n  registerRoutes = () => {\n    return (\n      <Router>\n        <div className=\"auth-box\">\n          <Switch>\n            <Route path=\"/login\">\n              <Login onToggleLogin={this.setLoginStatus} />\n            </Route>\n            <Route path=\"/register\">\n              <Register />\n            </Route>\n            <Route path=\"/home\">\n              <Home onToggleLogin={this.setLoginStatus} />\n            </Route>\n            <Route path=\"/\"></Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.navbar()}\n        {this.registerRoutes()}\n        <header className=\"header\">\n          <h1 className=\"\">Crypto Watch</h1>\n          <img src={\"https://bit.ly/2NAyCIX\"} className=\"HeaderImg\" alt=\"Header\" />\n        </header>\n\n        <div className=\"priceView\">\n          <h1>Current BTC Price: ${this.state.price.substring(0, this.state.price.indexOf(\".\"))}</h1>\n          {this.formInput()}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// import Home from \"./components/home\";\n//import Counters from \"./components/counters\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}