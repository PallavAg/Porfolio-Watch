{"version":3,"sources":["serviceWorker.js","components/login.js","components/register.js","components/Order.jsx","components/OrdersList.jsx","components/home.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Login","props","handleChange","name","event","setState","target","value","handleSubmit","a","preventDefault","loading","userData","email","state","password","axios","post","res","token","data","localStorage","setItem","loggedIn","onToggleLogin","console","log","error","getItem","jwt_decode","this","to","Container","Card","Body","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","onChange","Button","variant","disabled","Spinner","as","size","role","aria-hidden","Alert","React","Component","withRouter","Home","password2","msg","Order","order","className","title","price","OrderList","orders","map","index","key","id","logout","e","removeItem","signUpStatus","handlePriceChange","priceInput","placeBuy","thePrice","isNaN","length","alert","unshift","currVal","parseInt","invest","toString","placeSell","navbar","loginLink","onClick","Fragment","Navbar","sticky","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","formInput","setLoginStatus","loginStatus","registerRoutes","path","bind","user","get","headers","Authorization","response","header","then","responseJson","bpi","USD","rate","catch","src","alt","substring","indexOf","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75f8ecec.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { Redirect, Link, withRouter } from \"react-router-dom\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      loading: false,\n      loggedIn: false,\n      error: \"\"\n    };\n  }\n  componentDidMount() {\n    let token = localStorage.getItem(\"jwtToken\");\n    if (token) {\n      console.log(\"token\", token);\n      const decoded = jwt_decode(token);\n      if (decoded) {\n        this.setState({ loggedIn: true });\n        //this.state.onToggleLogin(this.state.loggedIn);\n        console.log(\"11\");\n      }\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n\n    let userData = { email: this.state.email, password: this.state.password };\n\n    try {\n      const res = await axios.post(\"/api/login\", userData);\n\n      // Save to localStorage\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n\n      this.setState({ loading: false, loggedIn: true });\n      this.props.onToggleLogin(this.state.loggedIn);\n      console.log(\"10\");\n    } catch (err) {\n      console.log(err);\n      this.setState({ loading: false, error: \"Login Failed\" });\n    }\n  };\n\n  render() {\n    console.log(this.props);\n\n    if (this.state.loggedIn === true) {\n      return <Redirect to=\"/\" />;\n    }\n\n    return (\n      <>\n        <Container>\n          <Card>\n            <Card.Body>\n              <p>\n                <Link to=\"/\">Close</Link>\n              </p>\n              <Form onSubmit={this.handleSubmit}>\n                <Form.Group controlId=\"formGroupEmail\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    value={this.state.email}\n                    onChange={this.handleChange(\"email\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupPassword\">\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    value={this.state.password}\n                    onChange={this.handleChange(\"password\")}\n                  />\n                </Form.Group>\n\n                {this.state.loading ? (\n                  <Button variant=\"primary\" disabled>\n                    <Spinner as=\"span\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n                    Loading...\n                  </Button>\n                ) : (\n                  <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                  </Button>\n                )}\n              </Form>\n              {this.state.error ? <Alert variant=\"danger\">{this.state.error}</Alert> : <></>}\n            </Card.Body>\n          </Card>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default withRouter(Login);\n","import React, { Component } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Alert from \"react-bootstrap/Alert\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { Link } from \"react-router-dom\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      password2: \"\",\n      loading: false,\n      error: \"\"\n    };\n  }\n  componentDidMount() {\n    let token = localStorage.getItem(\"jwtToken\");\n    if (token) {\n      console.log(\"token\", token);\n      console.log(token);\n      const decoded = jwt_decode(token);\n      if (decoded) {\n        this.setState({ loggedIn: true });\n      }\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({ [name]: event.target.value });\n  };\n\n  handleSubmit = async event => {\n    event.preventDefault();\n    this.setState({ loading: true });\n\n    if (this.state.password !== this.state.password2) {\n      this.setState({ loading: false, msg: \"Passwords don't match\" });\n    } else {\n      let userData = {\n        name: this.state.name,\n        email: this.state.email,\n        password: this.state.password\n      };\n\n      try {\n        await axios.post(\"/api/register\", userData);\n\n        this.setState({ loading: false, msg: \"Registration Successful.\" });\n      } catch (err) {\n        console.log(err);\n        this.setState({ loading: false, msg: \"Registration Failed.\" });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <Container>\n          <Card>\n            <Card.Body>\n              <p>\n                <Link to=\"/\">Close</Link>\n              </p>\n              <Form onSubmit={this.handleSubmit}>\n                <Form.Group controlId=\"formGroupEmail\">\n                  <Form.Label>Name</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter name\"\n                    value={this.state.name}\n                    onChange={this.handleChange(\"name\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupEmail\">\n                  <Form.Label>Email address</Form.Label>\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"Enter email\"\n                    value={this.state.email}\n                    onChange={this.handleChange(\"email\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupPassword\">\n                  <Form.Label>Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    value={this.state.password}\n                    onChange={this.handleChange(\"password\")}\n                  />\n                </Form.Group>\n                <Form.Group controlId=\"formGroupPassword\">\n                  <Form.Label>Confirm Password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Confirm Password\"\n                    value={this.state.password2}\n                    onChange={this.handleChange(\"password2\")}\n                  />\n                </Form.Group>\n\n                {this.state.loading ? (\n                  <Button variant=\"primary\" disabled>\n                    <Spinner as=\"span\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n                    Loading...\n                  </Button>\n                ) : (\n                  <Button variant=\"primary\" type=\"submit\">\n                    Submit\n                  </Button>\n                )}\n              </Form>\n              {this.state.msg ? <Alert variant=\"danger\">{this.state.msg}</Alert> : <></>}\n            </Card.Body>\n          </Card>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\n\nclass Order extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    let { order } = this.props;\n    let cardClass = \"shadow rounded-20 orderList card text-white bg-dark mb-3 rounded-2\";\n\n    return (\n      <div className={cardClass}>\n        <div className=\" card-header border-primary\">{order.title}</div>\n        <div className=\"card-body\">\n          <p className=\"card-text\">{order.price}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Order;\n","import React, { Component } from \"react\";\nimport Order from \"./Order\";\nimport { Redirect } from \"react-router-dom\";\n\nclass OrderList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    let orders = this.props.orders.map((order, index) => <Order key={index} order={order} index={index} />);\n\n    if (!this.props.loggedIn) {\n      return <Redirect to=\"/login\" />;\n    }\n\n    return (\n      <div id=\"ordercardList\" className=\"container\">\n        {orders}\n      </div>\n    );\n  }\n}\n\nexport default OrderList;\n","import Spinner from \"react-bootstrap/Spinner\";\nimport Button from \"react-bootstrap/Button\";\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport \"../App.css\";\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Login from \"./login\";\nimport Register from \"./register\";\n\nimport OrderList from \"./OrdersList\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.setLoginStatus = this.setLoginStatus.bind(this);\n    this.state = {\n      loading: true,\n      user: null,\n      loggedIn: false,\n      msg: \"\",\n      orders: [\n        { title: \"$5\", price: \"SELL\" },\n        { title: \"$50\", price: \"BUY\" },\n        { title: \"$200\", price: \"SELL\" },\n        { title: \"$20\", price: \"BUY\" },\n        { title: \"$100\", price: \"BUY\" },\n        { title: \"$150\", price: \"BUY\" }\n      ],\n      price: \"\",\n      priceInput: \"\",\n      loginStatus: \"\",\n      signUpStatus: \"Sign Up\",\n      invest: \"115\"\n    };\n  }\n\n  async componentDidMount() {\n    const token = localStorage.getItem(\"jwtToken\");\n    if (!token) {\n      this.setState({\n        loading: false,\n        loggedIn: false,\n        signUpStatus: \"Sign Up\"\n      });\n    } else if (this.state.loading) {\n      try {\n        const response = await axios.get(\"/api/protected\", {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n        console.log(response.data);\n        this.setState({\n          loading: false,\n          loggedIn: true,\n          signUpStatus: \"\",\n          user: jwt_decode(token, { header: true }),\n          msg: response.data.msg\n        });\n        // this.state.onToggleLogin(this.state.loggedIn);\n      } catch (error) {\n        console.log(error);\n        this.setState({\n          loading: false,\n          loggedIn: true,\n          user: jwt_decode(token, { header: true }),\n          msg: \"The protected route failed :( Check console for errors\",\n          signUpStatus: \"\"\n        });\n      }\n    }\n\n    await axios\n      .get(\"https://api.coindesk.com/v1/bpi/currentprice.json\")\n      .then(responseJson => {\n        responseJson = responseJson.data;\n        this.setState({ price: responseJson.bpi.USD.rate });\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  }\n\n  logout = e => {\n    if (this.state.loggedIn) {\n      e.preventDefault();\n      localStorage.removeItem(\"jwtToken\");\n      this.setState({ loggedIn: false, signUpStatus: \"Sign Up\" });\n      // this.state.onToggleLogin(!this.state.loggedIn);\n    }\n  };\n\n  handlePriceChange = e => {\n    this.setState({ priceInput: e.target.value });\n  };\n\n  placeBuy = () => {\n    let thePrice = this.state.priceInput;\n    if (!isNaN(thePrice) && thePrice.length !== 0) {\n      alert(\"Successfully placed order of $\" + thePrice + \" BTC!\");\n\n      let order = {\n        title: \"$\" + thePrice,\n        price: \"BUY\"\n      };\n\n      let { orders } = this.state;\n      orders.unshift(order);\n\n      let currVal = parseInt(this.state.invest);\n      currVal += parseInt(thePrice);\n      currVal = currVal.toString();\n      this.setState({ orders: orders, priceInput: \"\", invest: currVal });\n    } else {\n      alert(\"Please enter a number!\");\n    }\n  };\n\n  placeSell = () => {\n    let thePrice = this.state.priceInput;\n    if (!isNaN(thePrice) && thePrice.length !== 0) {\n      alert(\"Successfully placed order of $\" + thePrice + \" BTC!\");\n\n      let order = {\n        title: \"$\" + thePrice,\n        price: \"SELL\"\n      };\n\n      let { orders } = this.state;\n      orders.unshift(order);\n\n      let currVal = parseInt(this.state.invest);\n      currVal -= parseInt(thePrice);\n      currVal = currVal.toString();\n      this.setState({ orders: orders, priceInput: \"\", invest: currVal });\n    } else {\n      alert(\"Please enter a number!\");\n    }\n  };\n\n  navbar = () => {\n    let loginLink;\n    if (this.state.loggedIn) {\n      loginLink = (\n        <Link to=\"/\" onClick={this.logout}>\n          <Button variant=\"outline-light\" className=\"navbtnn\">\n            Logout\n          </Button>\n        </Link>\n      );\n    } else {\n      loginLink = (\n        <React.Fragment>\n          <Link to=\"/login\">\n            <Button variant=\"outline-light\" className=\"navbtnn\">\n              Login\n            </Button>\n          </Link>\n          <Link to=\"/register\">\n            <Button variant=\"outline-light\" className=\"navbtnn\">\n              {this.state.signUpStatus}\n            </Button>\n          </Link>\n        </React.Fragment>\n      );\n    }\n\n    return (\n      <Navbar sticky=\"top\" className=\"theNav\" variant=\"dark\" expand=\"lg\">\n        <Navbar.Brand className=\"navbar-brand mb-0 h1\" href=\"#home\">\n          Crypto Watch\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\"></Nav>\n          <Nav>\n            <Link to=\"/\">\n              <Button variant=\"outline-light\" className=\"navbtnn\">\n                Home\n              </Button>\n            </Link>\n            <Link to=\"/orders\">\n              <Button variant=\"outline-light\" className=\"navbtnn\">\n                Orders\n              </Button>\n            </Link>\n            {loginLink}\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  };\n\n  formInput = () => {\n    return (\n      <form>\n        <input\n          className=\"form-control form-control-lg btcEnter\"\n          placeholder=\"Enter BTC Price $\"\n          type=\"text\"\n          name=\"order\"\n          value={this.state.priceInput}\n          onChange={this.handlePriceChange}\n        />\n        <input\n          onClick={this.placeBuy}\n          className=\"btn btn-primary placeOrder btn-sm\"\n          type=\"button\"\n          value=\"Store Buy Order\"\n        />\n        &nbsp;&nbsp;\n        <input\n          onClick={this.placeSell}\n          className=\"btn btn-primary placeOrder btn-sm\"\n          type=\"button\"\n          value=\"Store Sell Order\"\n        />\n      </form>\n    );\n  };\n\n  setLoginStatus = loggedIn => {\n    this.setState({ loggedIn: loggedIn });\n    if (loggedIn) {\n      this.setState({ loginStatus: \"Logout\", signUpStatus: \"\" });\n    } else {\n      this.setState({ loginStatus: \"Login\", signUpStatus: \"Sign Up\" });\n    }\n  };\n\n  registerRoutes = () => {\n    return (\n      <div className=\"auth-box\">\n        <Switch>\n          <Route path=\"/login\">\n            <Login onToggleLogin={this.setLoginStatus} />\n          </Route>\n          <Route path=\"/register\">\n            <Register />\n          </Route>\n          <Route path=\"/home\">\n            <Home />\n          </Route>\n          <Route path=\"/\"></Route>\n        </Switch>\n      </div>\n    );\n  };\n\n  render() {\n    if (!this.state.loading && !this.state.loggedIn) {\n      //return <Redirect to=\"/login\" />;\n    }\n\n    if (this.state.loading) {\n      return <Spinner as=\"span\" size=\"lg\" role=\"status\" aria-hidden=\"true\" />;\n    }\n\n    return (\n      <div className=\"App\">\n        <Router>\n          <Switch>\n            <Route path=\"/register\">\n              {this.navbar()}\n              <Register />\n            </Route>\n            <Route path=\"/login\">\n              {this.navbar()}\n              <Login onToggleLogin={this.setLoginStatus} />\n            </Route>\n            <Route path=\"/orders\">\n              <div className=\"OrderTable App\">\n                {this.navbar()}\n                <h1 className=\"portfolio\">Investing in BTC: ${this.state.invest}</h1>\n                <OrderList loggedIn={this.state.loggedIn} orders={this.state.orders} />\n              </div>\n            </Route>\n            <Route path=\"/\">\n              {this.navbar()}\n              {this.registerRoutes()}\n              <header className=\"header\">\n                <h1 className=\"\">Crypto Watch</h1>\n                <img src={\"https://bit.ly/2NAyCIX\"} className=\"HeaderImg\" alt=\"Header\" />\n              </header>\n\n              <div className=\"priceView\">\n                <h1>Current BTC Price: ${this.state.price.substring(0, this.state.price.indexOf(\".\"))}</h1>\n                {this.formInput()}\n              </div>\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Home from \"./components/home\";\n//import Counters from \"./components/counters\";\n\nReactDOM.render(<Home />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}